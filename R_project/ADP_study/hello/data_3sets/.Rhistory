getwd
getwd()
data =read.csv('./Documents/Docu/DA/Bigdataintern/인천광역시/data/생활쓰레기모델_데이터셋.csv')
data =read.csv('./Documents/Docu/DA/Bigdataintern/인천광역시/data/생활쓰레기모델_데이터셋.csv', encoding = 'euc-kr')
data =read.csv('./Documents/Docu/DA/Bigdataintern/인천광역시/data/생활쓰레기모델_데이터셋.csv', encoding = 'utf-8')
data =read.csv('./Documents/Docu/DA/Bigdataintern/인천광역시/data/생활쓰레기모델_데이터셋.csv')
libray('ggplot2')
library('ggplot2')
install.packages('ggplot2')
library(ggplot2)
data("ChickWeight")
head(ChickWeight)
ggplot(ChickWeight, aes(x = Time, y = weight,  colour = Diet, group = Chick)) + geom_line()
# 점 그래프
ggplot(ChickWeight, aes(x = Time, y = weight,
colour = Diet)) + geom_point(alpha = 0.3)
# 스무스 그래프(Smooth Graph)
ggplot(ChickWeight, aes(x = Time, y = weight,
colour = Diet)) + geom_smooth(alpha = .4, size = 3)
ggplot(ChickWeight, aes(x = Time, y = weight,
colour = Diet)) +
geom_point(alpha = .3) +
geom_smooth(alpha = .2, size =1)
# 히스토그램
ggplot(subset(ChickWeight, Time = 21), aes(x= weight, file = Diet)) +
geom_histogram(colour = 'black', binwidth = 50) + facet_grid(Diet ~ . )
head(mtcars)
data(mtcars)
head(mtcars)
# 기본 그래프
p = qplot(wt, mpg, colour= hp, data = mtcars)
p + coord_cartesian(ylim = c(0, 40)) +
scale_colour_continuous(breaks = c(100, 300)) +
guides(colour = 'colourbar')
m <- mtcars[1:10, ]
p% + %m
p% + %m
p%+%m
# 막대 그래프
c <- ggplot(mtcars, aes(factor(cyl))) + geom_bar()
c + geom_bar(file ='white', colour ='red')
c + geom_bar(fill ='white', colour ='red')
# 시계열 데이터
data(econmics)
# 시계열 데이터
data(economics)
head(economics)
# 선 그래프
b <- ggplot(economics, aes(x=date, y = unemploy))
b+geom_line()
b+geom_line( colour = 'blue', size = .3, linetype = 3)
data(diamonds)
head(diamonds)
# 히스토그램
k <- ggplot(diamonds, aes(carat, ..density.. )) + geom_historgram(binwidth = .2)
# 히스토그램
k <- ggplot(diamonds, aes(carat, ..density.. )) + geom_histogram(binwidth = .2)
k + facet_grid(.~cut)
# 막대 그래프
w <- ggplot(diamonds, aes(clarity, fill = cut))
w + geom_bar()
w + geom_bar(aes(order = desc(cut)))
# 막대 그래프
w <- ggplot(diamonds, aes(clarity, fill = cut))
w + geom_bar(aes(order = desc(cut)))
w + geom_bar(order = desc(cut))
w + geom_bar(aes(order = cut))
w + geom_bar(aes(order = desc(cut)))
w + geom_bar(order = desc(cut))
w + geom_bar(order = cut)
w + geom_bar()
# 선형 모델링
dmod <- lm(price ~ cut, data = diamonds)
cuts <- data.frame(cut = unique(diamonds$cut),
predict(dmod, data.frame(cut = unique(diamonds$cut)), se = TRUE)[c('fit', 'se.fit')])
se <- ggplot(cuts, aes(x = cut, y = fit, ymin = fit - se.fit,
ymax = fit + se.fit, colour = cut))
se + geom_pointrange()
p <- ggplot(mtcars, aes(wt, mpg)) + geom_point()
p + annotate("rect", xmin = 2, xmax = 3.5, ymin = 2, ymax = 25, fill = 'dark gray',
alpha = .5)
# 축 범위 지정
p <- qplot(disp, wt, data = mtcars) + geom_smooth()
p + scale_x_continuous(limits = c(325, 500))
# box plot
qplot(cut, price, data = diamonds, geom ='boxplot')
last_plot() + coord_flip()
# qplot
qplot(cut, data = diamonds, geom='bar')
install.packages('googleVis')
library(googleVis)
data(Fruits)
head(Fruits)
M1 <- gvisMotionChart(Fruits, idvar = 'Fruit', timevar  = 'Year')
plot(M1)
plot(M1)
plot(M1)
# 지오 차트
data(Exports)
head(Exports)
G1 <- gviGeoChart(Exports, locationvar = 'Country', colorvar = 'Profit')
G1 <- gvisGeoChart(Exports, locationvar = 'Country', colorvar = 'Profit')
plot(G1)
# 유럽 국가별 수익 크기
G2 <- gvisGeoChart(Exports, "Country", "Profit", options= list(region='150'))
plot(G2)
require(datasets)
states <- data.frame(state.name, state.x77)
head(states)
# 미국의 주별 문맹률 정보
G3 <- gvisGeoChart(states, "state.name", "Illiteracy",
options = list(region='US', displayMode='regions', resolution ='provinces',
width = 600, height = 400))
plot(G3)
Andrew
# 허리케인 경로 : 색상으로 표시
head(Andrew)
G5 <- gvisGeoChart(Andrew, "LatLong", colorvar = 'Speed_kt',
options = list(region ='US'))
plot(G5)
# 허리케인 경로 : 원크기로 표시
G6 <- gvisGeoChart(Andrew, "LatLong", sizevar = 'Speed_kt',
colorvar = 'Pressure_mb',
options = list(region='US'))
plot(G6)
require(stats)
data(quakes)
head(quakes)
quakes$latlong = paste(quakes$lat , quakes$long, sep=":")
head(quakes$latlong)
G7 <- gvisGeoChart(quakes, "latlong", "depth", "mag",
options = list(displayMode = 'Markers', region ='009',
colorAxis = "{colors:['red','gray']}",
backgroundColor = 'lightblue'))
plot(G7)
library(ggplot2)
library(googleVis)
require(stats)
require(datasets)
# 고정 데이터 수집
install.packages('XML')
library(XML)
url <- "https://en.wikipedia.org/wiki/List_of_countries_by_credit_rating"
x <- readHTMLTable(readline(url), which = 3, header = T)
head(x)
x <- readHTMLTable(readline(url), which = 3, header = T)
x <- readHTMLTable(readLines(url), which = 3, header = T)
head(x)
levels(x$Rating) <- substring(levels(x$Rating), 4, nchar(levels(x$Rating)))
x$Ranking <- x$Rating
levels(x$Ranking) <- nlevels(x$Rating):1
x$Ranking <- as.character(x$Ranking)
x$Rating <- paste(x$Country/Region, x$Rating, sep=": ")
x$Rating <- paste(x$`Country/Region`, x$Rating, sep=": ")
G8 <- gvisGeoChart(x, "Country/Region", "Ranking", hovervar = "Rating",
options = list(gvis.editor="S&P",
colorAxis = "{colors : ['#91BFDB', '#FC8D59']}"))
plot(G8)
names(eq) <- c("DATE", " LAT","LON","MAG","DEPTH","LOCATION_NAME", "IRIS_ID")
eq <- readHTMLTable(readLines(url),
colClasses= c("factor", rep("numeric", 4), "factor"))$evTable,
names(eq) <- c("DATE", " LAT","LON","MAG","DEPTH","LOCATION_NAME", "IRIS_ID")
eq <- readHTMLTable(readLines(url),
colClasses= c("factor", rep("numeric", 4), "factor"))$evTable)
eq <- readHTMLTable(readLines(url),
colClasses= c("factor", rep("numeric", 4), "factor"))$evTable
names(eq) <- c("DATE", " LAT","LON","MAG","DEPTH","LOCATION_NAME", "IRIS_ID")
eq
eq <- readHTMLTable(readLines(url),
colClasses= c("factor", rep("numeric", 4), "factor"))$evTable
warings()
warnings()
eq <- readHTMLTable(readLines(url),
colClasses= c("factor", rep("numeric", 4), "factor", "numeric"))$evTable
warnings()
eq <- readHTMLTable(readLines(url))$evTable
names(eq) <- c("DATE", " LAT","LON","MAG","DEPTH","LOCATION_NAME", "IRIS_ID")
eq <- readHTMLTable(readLines(url),
colClasses= c("Date", rep("numeric", 4), "factor"))$evTable
eq <- readHTMLTable(readLines(url),
colClasses= c("Character", rep("numeric", 4), "factor"))$evTable
eq <- readHTMLTable(readLines(url))$evTable
eq
eq <- readHTMLTable(readLines(url))
url <- "http://ds.iris.edu/seismon/eventlist/index.phtml"
eq <- readHTMLTable(readLines(url),
colClasses= c("factor", rep("numeric", 4), "factor"))$evTable
names(eq) <- c("DATE", " LAT","LON","MAG","DEPTH","LOCATION_NAME", "IRIS_ID")
head(eq)
eq&loc = paste(eq$LAT, eq$LON, sep = ":")
G9 <- gvisGeoChart(eq, "loc", "DEPTH", " MAG",
options = list(displayMode = "Markers",
colorAxis = "{colors:['purple','red','orange','grey']}",
backgroundColor = "lightblue"), chartid = "EQ")
G9 <- gvisGeoChart(eq, "loc", "DEPTH", "MAG",
options = list(displayMode = "Markers",
colorAxis = "{colors:['purple','red','orange','grey']}",
backgroundColor = "lightblue"), chartid = "EQ")
tail(eq)
eq&loc = paste(eq$LAT, eq$LON, sep = ":")
eq&loc <- paste(eq$LAT, eq$LON, sep = ":")
eq$loc <- paste(eq$LAT, eq$LON, sep = ":")
G9 <- gvisGeoChart(eq, "loc", "DEPTH", "MAG",
options = list(displayMode = "Markers",
colorAxis = "{colors:['purple','red','orange','grey']}",
backgroundColor = "lightblue"),
chartid = "EQ")
plot(G9)
head(eq)
eq <- readHTMLTable(readLines(url),
colClasses= c("factor", rep("numeric", 4), "factor"))$evTable
names(eq) <- c("DATE", " LAT","LON","MAG","DEPTH","LOCATION_NAME", "IRIS_ID")
head(eq)
eq$loc <- paste(eq$LAT, eq$LON, sep = ":")
head(eq)
eq <- readHTMLTable(readLines(url),
colClasses= c("factor", rep("numeric", 4), "factor"))$evTable
eq$loc = paste(eq$LAT, eq$LON, sep = ":")
head(eq)
G9 <- gvisGeoChart(eq, "loc", "DEPTH", "MAG",
options = list(displayMode = "Markers",
colorAxis = "{colors:['purple','red','orange','grey']}",
backgroundColor = "lightblue"),
chartid = "EQ")
eq <- readHTMLTable(readLines(url),
colClasses= c("factor", rep("numeric", 4), "factor"))$evTable
names(eq) <- c("DATE", " LAT","LON","MAG","DEPTH","LOCATION_NAME", "IRIS_ID")
head(eq)
eq$loc = paste(eq$LAT, eq$LON, sep = ":")
G9 <- gvisGeoChart(eq, "loc", "DEPTH", "MAG",
options = list(displayMode = "Markers",
colorAxis = "{colors:['purple','red','orange','grey']}",
backgroundColor = "lightblue"),
chartid = "EQ")
plot(G9)
head(eq)
url <- "http://ds.iris.edu/seismon/eventlist/index.phtml"
eq <- readHTMLTable(readLines(url),
colClasses= c("factor", rep("numeric", 4), "factor"))$evTable
names(eq) <- c("DATE", " LAT","LON","MAG","DEPTH","LOCATION_NAME", "IRIS_ID")
head(eq)
eq$loc = paste(eq$LAT, eq$LON, sep = ":")
head(eq)
eq <- readHTMLTable(readLines(url),
colClasses= c("factor", rep("numeric", 4), "factor"))$evTable
eq$loc =<- paste(eq$LAT, eq$LON, sep = ":")
eq$loc <- paste(eq$LAT, eq$LON, sep = ":")
head(eq)
eq <- readHTMLTable(readLines(url),
colClasses= c("factor", rep("numeric", 4), "factor"))$evTable
names(eq) <- c("DATE", " LAT","LON","MAG","DEPTH","LOCATION_NAME", "IRIS_ID")
head(eq)
eq$loc <- paste(eq$LAT, eq$LON, sep = ":")
head(eq)
eq <- readHTMLTable(readLines(url),
colClasses= c("factor", rep("numeric", 4), "factor"))$evTable
names(eq) <- c("DATE", " LAT","LON","MAG","DEPTH","LOCATION_NAME", "IRIS_ID")
head(eq)
eq$loc = paste(eq$LAT, eq$LON, sep = ":")
head(eq)
paste(eq$LAT, eq$LON, sep = ":")
eq <- readHTMLTable(readLines(url),
colClasses= c("factor", rep("numeric", 4), "factor"))$evTable
names(eq) <- c("DATE", "LAT","LON","MAG","DEPTH","LOCATION_NAME", "IRIS_ID")
head(eq)
eq$loc = paste(eq$LAT, eq$LON, sep = ":")
head(eq)
G9 <- gvisGeoChart(eq, "loc", "DEPTH", "MAG",
options = list(displayMode = "Markers",
colorAxis = "{colors:['purple','red','orange','grey']}",
backgroundColor = "lightblue"),
chartid = "EQ")
plot(G9)
options(repos = c(RStudio = 'http://rstudio.org/_packages', getOption('repos')))
install.packages('shiny')
library(shiny)
runExample('01_hello')
runExample('02_text')
runExample('03_reactivity')
setwd('/hello')
setwd('./hello')
library('shiny')
runApp()
getwd()
setwd("/Users/jihye/Documents/Docu/DA/CodeProject/R_project/ADP_study/hello")
runApp()
runApp()
runApp()
runApp()
setwd('/Users/jihye/Documents/Docu/DA/CodeProject/R_project/ADP_study/hello/data_3sets')
runApp()
library(shiny)
setwd('/Users/jihye/Documents/Docu/DA/CodeProject/R_project/ADP_study/hello/data_3sets')
runApp()
runApp()
setwd('/Users/jihye/Documents/Docu/DA/CodeProject/R_project/ADP_study/hello/data_3sets')
runApp()
setwd('/Users/jihye/Documents/Docu/DA/CodeProject/R_project/ADP_study/hello/data_3sets')
runApp()
runApp()
runApp()
View(diamonds)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('dplyr')
library(dplyr)
runApp()
runApp()
View(mtcars)
mtcars.info()
str(mtcars)
runApp()
runApp()
